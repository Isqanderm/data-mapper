name: CI

on: [push, pull_request]

jobs:
  test:
    name: Unit Tests & Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for better coverage comparison

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        run: npm test

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true  # Fail CI if coverage upload fails
          verbose: true

  coverage-check:
    name: Coverage Protection Check
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage on PR branch
        run: npm test
        continue-on-error: true

      - name: Save PR coverage
        run: |
          if [ -f coverage/coverage-summary.json ]; then
            cp coverage/coverage-summary.json coverage-pr.json
          else
            echo "⚠️ Coverage summary not found for PR branch"
            exit 1
          fi

      - name: Checkout main branch
        run: |
          git fetch origin main
          git checkout main

      - name: Install dependencies on main
        run: npm ci

      - name: Run tests with coverage on main branch
        run: npm test
        continue-on-error: true

      - name: Save main coverage
        run: |
          if [ -f coverage/coverage-summary.json ]; then
            cp coverage/coverage-summary.json coverage-main.json
            echo "✅ Main branch coverage summary found"
          else
            echo "⚠️ Coverage summary not found for main branch"
            echo "This is expected if main branch doesn't have json-summary reporter yet."
            echo "Creating a fallback coverage file with 0% coverage to allow the check to pass."
            # Create a minimal coverage file with 0% to ensure PR doesn't fail
            echo '{"total":{"lines":{"total":0,"covered":0,"skipped":0,"pct":0},"statements":{"total":0,"covered":0,"skipped":0,"pct":0},"functions":{"total":0,"covered":0,"skipped":0,"pct":0},"branches":{"total":0,"covered":0,"skipped":0,"pct":0}}}' > coverage-main.json
            echo "MAIN_BRANCH_NO_COVERAGE=true" >> $GITHUB_ENV
          fi

      - name: Compare coverage and fail if decreased
        run: |
          echo "📊 Comparing coverage between main and PR..."

          # Extract coverage percentages from main branch
          MAIN_LINES=$(cat coverage-main.json | grep -o '"lines":{"total":[0-9]*,"covered":[0-9]*,"skipped":[0-9]*,"pct":[0-9.]*' | grep -o 'pct":[0-9.]*' | cut -d':' -f2)
          MAIN_STATEMENTS=$(cat coverage-main.json | grep -o '"statements":{"total":[0-9]*,"covered":[0-9]*,"skipped":[0-9]*,"pct":[0-9.]*' | grep -o 'pct":[0-9.]*' | cut -d':' -f2)
          MAIN_FUNCTIONS=$(cat coverage-main.json | grep -o '"functions":{"total":[0-9]*,"covered":[0-9]*,"skipped":[0-9]*,"pct":[0-9.]*' | grep -o 'pct":[0-9.]*' | cut -d':' -f2)
          MAIN_BRANCHES=$(cat coverage-main.json | grep -o '"branches":{"total":[0-9]*,"covered":[0-9]*,"skipped":[0-9]*,"pct":[0-9.]*' | grep -o 'pct":[0-9.]*' | cut -d':' -f2)

          # Extract coverage percentages from PR branch
          PR_LINES=$(cat coverage-pr.json | grep -o '"lines":{"total":[0-9]*,"covered":[0-9]*,"skipped":[0-9]*,"pct":[0-9.]*' | grep -o 'pct":[0-9.]*' | cut -d':' -f2)
          PR_STATEMENTS=$(cat coverage-pr.json | grep -o '"statements":{"total":[0-9]*,"covered":[0-9]*,"skipped":[0-9]*,"pct":[0-9.]*' | grep -o 'pct":[0-9.]*' | cut -d':' -f2)
          PR_FUNCTIONS=$(cat coverage-pr.json | grep -o '"functions":{"total":[0-9]*,"covered":[0-9]*,"skipped":[0-9]*,"pct":[0-9.]*' | grep -o 'pct":[0-9.]*' | cut -d':' -f2)
          PR_BRANCHES=$(cat coverage-pr.json | grep -o '"branches":{"total":[0-9]*,"covered":[0-9]*,"skipped":[0-9]*,"pct":[0-9.]*' | grep -o 'pct":[0-9.]*' | cut -d':' -f2)

          echo "Main branch coverage:"
          echo "  Lines: ${MAIN_LINES}%"
          echo "  Statements: ${MAIN_STATEMENTS}%"
          echo "  Functions: ${MAIN_FUNCTIONS}%"
          echo "  Branches: ${MAIN_BRANCHES}%"
          echo ""
          echo "PR branch coverage:"
          echo "  Lines: ${PR_LINES}%"
          echo "  Statements: ${PR_STATEMENTS}%"
          echo "  Functions: ${PR_FUNCTIONS}%"
          echo "  Branches: ${PR_BRANCHES}%"
          echo ""

          # Compare coverage (using bc for floating point comparison)
          FAILED=0

          if (( $(echo "$PR_LINES < $MAIN_LINES" | bc -l) )); then
            echo "❌ Lines coverage decreased from ${MAIN_LINES}% to ${PR_LINES}%"
            FAILED=1
          else
            echo "✅ Lines coverage: ${PR_LINES}% (main: ${MAIN_LINES}%)"
          fi

          if (( $(echo "$PR_STATEMENTS < $MAIN_STATEMENTS" | bc -l) )); then
            echo "❌ Statements coverage decreased from ${MAIN_STATEMENTS}% to ${PR_STATEMENTS}%"
            FAILED=1
          else
            echo "✅ Statements coverage: ${PR_STATEMENTS}% (main: ${MAIN_STATEMENTS}%)"
          fi

          if (( $(echo "$PR_FUNCTIONS < $MAIN_FUNCTIONS" | bc -l) )); then
            echo "❌ Functions coverage decreased from ${MAIN_FUNCTIONS}% to ${PR_FUNCTIONS}%"
            FAILED=1
          else
            echo "✅ Functions coverage: ${PR_FUNCTIONS}% (main: ${MAIN_FUNCTIONS}%)"
          fi

          if (( $(echo "$PR_BRANCHES < $MAIN_BRANCHES" | bc -l) )); then
            echo "❌ Branches coverage decreased from ${MAIN_BRANCHES}% to ${PR_BRANCHES}%"
            FAILED=1
          else
            echo "✅ Branches coverage: ${PR_BRANCHES}% (main: ${MAIN_BRANCHES}%)"
          fi

          if [ $FAILED -eq 1 ]; then
            echo ""
            echo "❌ Coverage check FAILED: Coverage has decreased compared to main branch"
            echo "Please add tests to maintain or improve code coverage."
            echo "COVERAGE_STATUS=failed" >> $GITHUB_ENV
            echo "COVERAGE_FAILED=1" >> $GITHUB_ENV
          else
            echo ""
            echo "✅ Coverage check PASSED: Coverage maintained or improved"
            echo "COVERAGE_STATUS=passed" >> $GITHUB_ENV
            echo "COVERAGE_FAILED=0" >> $GITHUB_ENV
          fi

          # Save coverage values for PR comment
          echo "MAIN_LINES=${MAIN_LINES}" >> $GITHUB_ENV
          echo "MAIN_STATEMENTS=${MAIN_STATEMENTS}" >> $GITHUB_ENV
          echo "MAIN_FUNCTIONS=${MAIN_FUNCTIONS}" >> $GITHUB_ENV
          echo "MAIN_BRANCHES=${MAIN_BRANCHES}" >> $GITHUB_ENV
          echo "PR_LINES=${PR_LINES}" >> $GITHUB_ENV
          echo "PR_STATEMENTS=${PR_STATEMENTS}" >> $GITHUB_ENV
          echo "PR_FUNCTIONS=${PR_FUNCTIONS}" >> $GITHUB_ENV
          echo "PR_BRANCHES=${PR_BRANCHES}" >> $GITHUB_ENV

      - name: Comment PR with coverage comparison
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = process.env.COVERAGE_STATUS;
            const failed = process.env.COVERAGE_FAILED === '1';
            const mainBranchNoCoverage = process.env.MAIN_BRANCH_NO_COVERAGE === 'true';

            const mainLines = process.env.MAIN_LINES || '0';
            const mainStatements = process.env.MAIN_STATEMENTS || '0';
            const mainFunctions = process.env.MAIN_FUNCTIONS || '0';
            const mainBranches = process.env.MAIN_BRANCHES || '0';

            const prLines = process.env.PR_LINES || '0';
            const prStatements = process.env.PR_STATEMENTS || '0';
            const prFunctions = process.env.PR_FUNCTIONS || '0';
            const prBranches = process.env.PR_BRANCHES || '0';

            const getIcon = (pr, main) => {
              const prNum = parseFloat(pr);
              const mainNum = parseFloat(main);
              if (prNum > mainNum) return '📈';
              if (prNum < mainNum) return '📉';
              return '➡️';
            };

            const getStatus = (pr, main) => {
              const prNum = parseFloat(pr);
              const mainNum = parseFloat(main);
              if (prNum < mainNum) return '❌';
              return '✅';
            };

            const statusIcon = failed ? '❌' : '✅';
            const statusText = failed ? 'FAILED - Coverage Decreased' : 'PASSED - Coverage Maintained';

            let body;

            if (mainBranchNoCoverage) {
              // Special message for first-time setup
              body = \`## ℹ️ Code Coverage Protection - First Time Setup

              **Status:** ✅ PASSED (Initial Setup)

              ### PR Coverage

              | Metric | This PR |
              |--------|---------|
              | Lines | \${prLines}% |
              | Statements | \${prStatements}% |
              | Functions | \${prFunctions}% |
              | Branches | \${prBranches}% |

              ### 📝 Note

              This is the first PR with coverage protection enabled. The main branch doesn't have the \`json-summary\` reporter configured yet, so we can't compare coverage.

              **Once this PR is merged**, all future PRs will be compared against the main branch coverage and will be blocked if coverage decreases.

              ---

              *Coverage protection will be fully active after this PR is merged.*\`;
            } else {
              // Normal coverage comparison
              body = \`## \${statusIcon} Code Coverage Check

              **Status:** \${statusText}

              ### Coverage Comparison

              | Metric | Main Branch | This PR | Change | Status |
              |--------|-------------|---------|--------|--------|
              | Lines | \${mainLines}% | \${prLines}% | \${getIcon(prLines, mainLines)} \${(parseFloat(prLines) - parseFloat(mainLines)).toFixed(2)}% | \${getStatus(prLines, mainLines)} |
              | Statements | \${mainStatements}% | \${prStatements}% | \${getIcon(prStatements, mainStatements)} \${(parseFloat(prStatements) - parseFloat(mainStatements)).toFixed(2)}% | \${getStatus(prStatements, mainStatements)} |
              | Functions | \${mainFunctions}% | \${prFunctions}% | \${getIcon(prFunctions, mainFunctions)} \${(parseFloat(prFunctions) - parseFloat(mainFunctions)).toFixed(2)}% | \${getStatus(prFunctions, mainFunctions)} |
              | Branches | \${mainBranches}% | \${prBranches}% | \${getIcon(prBranches, mainBranches)} \${(parseFloat(prBranches) - parseFloat(mainBranches)).toFixed(2)}% | \${getStatus(prBranches, mainBranches)} |

              \${failed
                ? '### ⚠️ Action Required\\n\\nThis PR decreases code coverage. Please add tests to cover the new/modified code before merging.\\n\\n**This check is blocking the PR from being merged.**'
                : '### ✅ Great Job!\\n\\nCode coverage has been maintained or improved. This PR is ready for review.'}

              ---

              *Coverage protection is enabled. PRs that decrease coverage will be blocked from merging.*\`;
            }

            // Find existing coverage comment
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Code Coverage Check')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                comment_id: botComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }

      - name: Fail if coverage decreased
        if: env.COVERAGE_FAILED == '1'
        run: |
          echo "❌ Coverage check failed - blocking PR merge"
          exit 1

  esm-validation:
    name: ESM Build Validation
    runs-on: ubuntu-latest
    needs: test  # Run after unit tests pass
    strategy:
      matrix:
        node-version: [18, 20, 22]  # Test on multiple Node.js versions
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project (CJS + ESM)
        run: npm run build

      - name: Verify ESM build artifacts exist
        run: |
          echo "Checking ESM build artifacts..."
          test -d build/esm || (echo "❌ ESM build directory not found" && exit 1)
          test -f build/esm/index.js || (echo "❌ ESM entry point not found" && exit 1)
          test -f build/esm/package.json || (echo "❌ ESM package.json marker not found" && exit 1)
          echo "✅ ESM build artifacts verified"

      - name: Verify ESM package.json type marker
        run: |
          echo "Checking ESM package.json marker..."
          grep -q '"type".*"module"' build/esm/package.json || (echo "❌ ESM package.json missing type:module" && exit 1)
          echo "✅ ESM package.json type marker verified"

      - name: Run ESM integration tests
        run: npm run test:esm

      - name: Test ESM import in Node.js (smoke test)
        run: |
          echo "Testing direct ESM import..."
          node -e "import('./build/esm/index.js').then(m => { console.log('✅ ESM import successful'); console.log('Exports:', Object.keys(m).join(', ')); }).catch(e => { console.error('❌ ESM import failed:', e.message); process.exit(1); })"

      - name: Upload ESM test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: esm-test-results-node-${{ matrix.node-version }}
          path: |
            build/esm/**/*.js
            build/esm/package.json
          retention-days: 7

  esm-validation-summary:
    name: ESM Validation Summary
    runs-on: ubuntu-latest
    needs: esm-validation
    if: always() && github.event_name == 'pull_request'
    steps:
      - name: Comment PR with ESM validation results
        uses: actions/github-script@v7
        with:
          script: |
            const conclusion = '${{ needs.esm-validation.result }}';
            const nodeVersions = ['18', '20', '22'];

            let statusIcon = conclusion === 'success' ? '✅' : '❌';
            let statusText = conclusion === 'success' ? 'All ESM validation checks passed!' : 'ESM validation failed!';

            const body = `## ${statusIcon} ESM Build Validation

            **Status:** ${statusText}

            ### Test Matrix Results

            | Node.js Version | Status |
            |-----------------|--------|
            ${nodeVersions.map(v => `| ${v} | ${conclusion === 'success' ? '✅ Passed' : '❌ Failed'} |`).join('\n')}

            ### Validation Steps

            - ${conclusion === 'success' ? '✅' : '❌'} ESM build artifacts generated
            - ${conclusion === 'success' ? '✅' : '❌'} \`package.json\` type marker present
            - ${conclusion === 'success' ? '✅' : '❌'} All imports have proper \`.js\` extensions
            - ${conclusion === 'success' ? '✅' : '❌'} Runtime import tests passed
            - ${conclusion === 'success' ? '✅' : '❌'} Functionality tests passed

            ### What This Validates

            The ESM validation suite ensures:

            1. **Import Resolution**: All relative imports have proper \`.js\` extensions for Node.js ESM compatibility
            2. **Directory Imports**: Directory imports correctly resolve to \`/index.js\`
            3. **Package Structure**: ESM build includes \`package.json\` with \`"type": "module"\`
            4. **Runtime Compatibility**: Package can be imported and used in Node.js 18, 20, and 22
            5. **Export Completeness**: All expected exports are accessible
            6. **Functionality**: Imported code executes correctly

            ${conclusion === 'success'
              ? '✅ **The package is ready for ESM consumption!**'
              : '❌ **Please fix ESM issues before merging.**'}

            ---

            *This validation prevents issues like missing \`.js\` extensions, broken directory imports, and \`ERR_MODULE_NOT_FOUND\` errors.*`;

            // Find existing ESM validation comment
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('ESM Build Validation')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                comment_id: botComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }

