name: Benchmark

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  deployments: write
  pull-requests: write

jobs:
  benchmark:
    name: Run Performance Benchmarks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Install benchmark dependencies
        run: cd benchmarks && npm ci

      - name: Build benchmarks
        run: cd benchmarks && npm run build

      - name: Run class-transformer comparison benchmark
        run: |
          npm run bench:compat > benchmark-compat.txt 2>&1 || echo "Comparison benchmark failed" > benchmark-compat.txt
          cat benchmark-compat.txt

      - name: Run simple benchmark
        continue-on-error: true
        run: |
          if [ -f "benchmarks/build/benchmarks/simple/Mapper.performance-benchmark.js" ]; then
            cd benchmarks && node build/benchmarks/simple/Mapper.performance-benchmark.js > ../benchmark-simple.txt 2>&1
          else
            echo "Simple benchmark not available (file not found)" > benchmark-simple.txt
          fi

      - name: Run complex benchmark
        continue-on-error: true
        run: |
          if [ -f "benchmarks/build/benchmarks/complex/Mapper.performance-benchmark.complex.js" ]; then
            cd benchmarks && node build/benchmarks/complex/Mapper.performance-benchmark.complex.js > ../benchmark-complex.txt 2>&1
          else
            echo "Complex benchmark not available (file not found)" > benchmark-complex.txt
          fi

      - name: Generate JSON benchmark results for tracking
        run: |
          node benchmarks/suites/compat/comparison-json.js > bench-results.json 2>&1 || echo "[]" > bench-results.json
          echo "Benchmark results for tracking:"
          cat bench-results.json

      - name: Store benchmark result (main branch only)
        uses: benchmark-action/github-action-benchmark@v1
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        with:
          name: om-data-mapper Performance
          tool: 'benchmarkjs'
          output-file-path: bench-results.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          alert-threshold: '150%'
          comment-on-alert: true
          fail-on-alert: false
          alert-comment-cc-users: '@Isqanderm'
          summary-always: true
          gh-pages-branch: gh-pages
          benchmark-data-dir-path: dev/bench

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: |
            bench-results.json
            benchmark-simple.txt
            benchmark-complex.txt
            benchmark-compat.txt
          retention-days: 30

      - name: Comment PR with comparison results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Read all benchmark results
            let compatResults = '';
            let simpleResults = '';
            let complexResults = '';

            try {
              compatResults = fs.readFileSync('benchmark-compat.txt', 'utf8');
            } catch (e) {
              compatResults = 'Comparison benchmark not available';
            }

            try {
              simpleResults = fs.readFileSync('benchmark-simple.txt', 'utf8');
            } catch (e) {
              simpleResults = 'Simple benchmark not available';
            }

            try {
              complexResults = fs.readFileSync('benchmark-complex.txt', 'utf8');
            } catch (e) {
              complexResults = 'Complex benchmark not available';
            }

            // Extract summary from compat results
            const summaryMatch = compatResults.match(/ðŸ“ˆ Summary[\s\S]*$/);
            const summary = summaryMatch ? summaryMatch[0] : compatResults;

            const body = '## ðŸš€ Performance Benchmark Results\n\n' +
              '### ðŸ“Š om-data-mapper vs class-transformer Comparison\n\n' +
              '```\n' + summary + '\n```\n\n' +
              '<details>\n<summary>ðŸ“‹ Full Comparison Details</summary>\n\n' +
              '```\n' + compatResults + '\n```\n\n</details>\n\n' +
              '<details>\n<summary>âš¡ Simple Mapping Benchmark</summary>\n\n' +
              '```\n' + simpleResults + '\n```\n\n</details>\n\n' +
              '<details>\n<summary>ðŸ”§ Complex Transformations Benchmark</summary>\n\n' +
              '```\n' + complexResults + '\n```\n\n</details>\n\n' +
              '---\n*Benchmarked with Benchmark.js on Node.js 20 â€¢ [View History](https://isqanderm.github.io/data-mapper/dev/bench/)*';

            // Find existing benchmark comment
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Performance Benchmark Results')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                comment_id: botComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }

